provider "aws" {
  access_key = "{{ apocng_aws.access_key }}"
  secret_key = "{{ apocng_aws.secret_key }}"
  region     = "{{ apocng_aws.region }}"
}

resource "aws_key_pair" "{{ apocng_uuid }}-admin-key" {
  key_name   = "{{ apocng_uuid }}-admin-key"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDqFpmnn+ts5BVz9QXansgOQnNY9SFYxyiKuQJONridAFM+j7mKDOl1jL9QA44+MadochyZgvwwlEk7jufPpLea2gV+AY7CuazIPwb2SM+NDnoMJ4iKt3a56V5ATKSOUluQ27RIKfDMdRv362GOOZJO6He59Pitppt3gAZTM5+FFc1TV5Nu4hQWyMdf0F+jBHaFYmRlFgHqSTHTY5mTCphgB0bkkstvChHpJKT6LkWNDzt58ZMgdZE4JTRUKvfiNfIGMRRb0OEasR4lu/xEME+9OjKf6+7gNF4t/oM4WOi5tBGxpwV/wgEt1pJMDkqkaoir6iHY+RiD60qKd0LW0dXB ubuntu@ip-172-31-19-10"
}

resource "aws_security_group" "{{ apocng_uuid }}-allow_all" {
  name        = "{{ apocng_uuid }}-allow_all"
  description = "Allow all inbound traffic"

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
}

resource "aws_iam_role" "{{ apocng_uuid }}-role" {
  name = "{{ apocng_uuid }}-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

resource "aws_iam_instance_profile" "{{ apocng_uuid }}-instance-profile" {
  name  = "{{ apocng_uuid }}-instance-profile"
  role = "${aws_iam_role.{{ apocng_uuid }}-role.name}"
}

resource "aws_iam_policy" "{{ apocng_uuid }}-policy" {
  name        = "{{ apocng_uuid }}-policy"
  path        = "/"
  description = "{{ apocng_uuid }} policy"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "NotAction": "iam:*",
            "Resource": "*"
        }
    ]
}
EOF
}

# XXX
# WARNING: The aws_iam_policy_attachment resource creates exclusive attachments of IAM policies. Across the entire AWS account, all of the users/roles/groups to which a single policy is attached must be declared by a single aws_iam_policy_attachment resource. This means that even any users/roles/groups that have the attached policy via some mechanism other than Terraform will have that attached policy revoked by Terraform
resource "aws_iam_policy_attachment" "{{ apocng_uuid }}-attachment" {
  name       = "{{ apocng_uuid }}-attachment"
  roles      = ["${aws_iam_role.{{ apocng_uuid }}-role.name}"]
  policy_arn = "${aws_iam_policy.{{ apocng_uuid }}-policy.arn}"
}

{% for i in range(apocng_k8s_nodes) %}
resource "aws_instance" "{{ apocng_uuid }}-k8s-{{ i }}" {
  ami           = "ami-ecc63a94"
  instance_type = "t2.large"
  key_name = "{{ apocng_uuid }}-admin-key"
  security_groups = ["{{ apocng_uuid }}-allow_all"]
  iam_instance_profile = "{{ apocng_uuid }}-instance-profile"
  tags = {
    KubernetesCluster = "{{ apocng_uuid }}"
  }
}
{% endfor %}
